//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:4.0.30319.42000
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

namespace pEngine.Properties {
    using System;
    
    
    /// <summary>
    ///   Classe di risorse fortemente tipizzata per la ricerca di stringhe localizzate e così via.
    /// </summary>
    // Questa classe è stata generata automaticamente dalla classe StronglyTypedResourceBuilder.
    // tramite uno strumento quale ResGen o Visual Studio.
    // Per aggiungere o rimuovere un membro, modificare il file con estensione ResX ed eseguire nuovamente ResGen
    // con l'opzione /str oppure ricompilare il progetto VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Restituisce l'istanza di ResourceManager nella cache utilizzata da questa classe.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("pEngine.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Esegue l'override della proprietà CurrentUICulture del thread corrente per tutte le
        ///   ricerche di risorse eseguite utilizzando questa classe di risorse fortemente tipizzata.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Cerca una stringa localizzata simile a #version 330 core
        ///
        ///// Texture uniform
        ///uniform sampler2D Texture;
        ///
        ///// Input variables
        ///in vec4 VertexColor;
        ///in vec2 FragTexCoord;
        ///
        ///// Color output
        ///out vec4 FinalColor;
        ///
        ///void main() 
        ///{
        ///    FinalColor = VertexColor;
        ///}.
        /// </summary>
        public static string FillShaderFrag {
            get {
                return ResourceManager.GetString("FillShaderFrag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Cerca una stringa localizzata simile a #version 330 core
        ///
        ///// - Inputs
        ///layout(location = 1) in vec2 Vertex;
        ///layout(location = 2) in vec2 TexCoord;
        ///layout(location = 3) in vec4 Color;
        ///
        ///uniform mat4 ModelView;
        ///
        ///// - Outputs
        ///out vec4 VertexColor;
        ///out vec2 FragTexCoord;
        ///
        ///void main() 
        ///{
        ///	VertexColor = Color;
        ///	FragTexCoord = TexCoord;
        ///
        ///	gl_Position = ModelView * vec4(Vertex, 1, 1);
        ///}.
        /// </summary>
        public static string FillShaderVert {
            get {
                return ResourceManager.GetString("FillShaderVert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Cerca una stringa localizzata simile a #version 330 core
        ///
        ///// Texture uniform
        ///uniform sampler2D Texture;
        ///
        ///// Input variables
        ///in vec2 FragTextCoord;
        ///in vec4 FragVertexColor;
        ///
        ///// Color output
        ///out vec4 FinalColor;
        ///
        ///void main() 
        ///{
        ///	vec4 Col = texture(Texture, FragTextCoord);
        ///
        ///	if (Col.a == 0)
        ///		discard;
        ///
        ///	// Blend with a color
        ///    FinalColor = Col;
        ///
        ///}.
        /// </summary>
        public static string FrameBufferShaderFrag {
            get {
                return ResourceManager.GetString("FrameBufferShaderFrag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Cerca una stringa localizzata simile a #version 330 core
        ///
        ///// - Inputs
        ///layout(location = 1) in vec2 Vertex;
        ///layout(location = 2) in vec2 TexCoord;
        ///layout(location = 3) in vec4 Color;
        ///
        ///uniform mat4 ModelView;
        ///
        ///// - Outputs
        ///out vec4 FragVertexColor;
        ///out vec2 FragTextCoord;
        ///
        ///void main() 
        ///{
        ///	FragVertexColor = Color;
        ///	FragTextCoord = TexCoord;
        ///
        ///	gl_Position = ModelView * vec4(Vertex, 1, 1);
        ///}.
        /// </summary>
        public static string FrameBufferShaderVert {
            get {
                return ResourceManager.GetString("FrameBufferShaderVert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Cerca una stringa localizzata simile a #version 330 core
        ///
        ///// Texture uniform
        ///uniform sampler2D Textures[32];
        ///
        ///// Input variables
        ///in vec2 FragTextCoord;
        ///in vec4 FragVertexColor;
        ///
        ///// Parameters
        ///in float FragOperations[31];
        ///in int FragTextureCount;
        ///
        ///// Color output
        ///out vec4 OutputColor;
        ///
        ///void main() 
        ///{
        ///	vec4 finalColor = texture(Texture[0], FragTextCoord);
        ///
        ///	for (int i = 1; i &lt; FragTextureCount + 1; i++)
        ///	{
        ///		vec4 MaskColor = texture(Texture[i], FragTextCoord);
        ///
        ///		float alphaChannel = MaskColor.a;
        ///
        ///		if (FragOperation[i -  [stringa troncata]&quot;;.
        /// </summary>
        public static string MaskShaderFrag {
            get {
                return ResourceManager.GetString("MaskShaderFrag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Cerca una stringa localizzata simile a #version 330 core
        ///
        ///// - Inputs
        ///layout(location = 1) in vec2 Vertex;
        ///layout(location = 2) in vec2 TexCoord;
        ///layout(location = 3) in vec4 Color;
        ///
        ///// - Layer mask operations
        ///uniform float Operations[31];
        ///uniform int TextureCount;
        ///
        ///uniform mat4 ModelView;
        ///
        ///// - Outputs
        ///out float FragOperations[31];
        ///out vec4 FragVertexColor;
        ///out vec2 FragTextCoord;
        ///out int FragTextureCount;
        ///
        ///void main() 
        ///{
        ///	FragVertexColor = Color;
        ///	FragTextCoord = TexCoord;
        ///	FragOperations = Operations;
        ///	FragTextureCount [stringa troncata]&quot;;.
        /// </summary>
        public static string MaskShaderVert {
            get {
                return ResourceManager.GetString("MaskShaderVert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Cerca una stringa localizzata simile a #version 330 core
        ///
        ///// Texture uniform
        ///uniform sampler2D Texture;
        ///
        ///// Input variables
        ///in vec2 FragTextCoord;
        ///in vec4 FragVertexColor;
        ///
        ///// Parameters
        ///in float FragOpacity;
        ///in float FragBrightness;
        ///in float FragContrast;
        ///
        ///// Color output
        ///out vec4 FinalColor;
        ///
        ///void main() 
        ///{
        ///	vec4 Col = texture(Texture, FragTextCoord);
        ///
        ///	// Grab color
        ///	vec4 PixelColor = Col;
        ///	PixelColor.rgb /= PixelColor.a;
        ///
        ///	// Apply contrast.
        ///	PixelColor.rgb = ((PixelColor.rgb - 0.5f) * max(FragContrast, 0)) + 0.5f;        /// [stringa troncata]&quot;;.
        /// </summary>
        public static string SpriteShaderFrag {
            get {
                return ResourceManager.GetString("SpriteShaderFrag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Cerca una stringa localizzata simile a #version 330 core
        ///
        ///// - Inputs
        ///layout(location = 1) in vec2 Vertex;
        ///layout(location = 2) in vec2 TexCoord;
        ///layout(location = 3) in vec4 Color;
        ///
        ///// - Visibility &amp; effects
        ///uniform float Opacity;
        ///uniform float Brightness;
        ///uniform float Contrast;
        ///
        ///uniform mat4 ModelView;
        ///
        ///// - Outputs
        ///out vec4 FragVertexColor;
        ///out vec2 FragTextCoord;
        ///out float FragOpacity;
        ///out float FragBrightness;
        ///out float FragContrast;
        ///
        ///void main() 
        ///{
        ///	FragVertexColor = Color;
        ///	FragTextCoord = TexCoord;
        ///	FragOpacity  [stringa troncata]&quot;;.
        /// </summary>
        public static string SpriteShaderVert {
            get {
                return ResourceManager.GetString("SpriteShaderVert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Cerca una stringa localizzata simile a #version 330 core
        ///
        ///// Texture uniform
        ///uniform sampler2D Texture;
        ///
        ///// Input variables
        ///in vec2 FragTextCoord;
        ///in vec4 FragVertexColor;
        ///
        ///in vec4 FragOutlineColor;
        ///
        ///in float FragContentMaskBit;
        ///in float FragOutlineMaskBit;
        ///
        ///// Color output
        ///out vec4 FinalColor;
        ///
        ///void main() 
        ///{
        ///	vec4 TextureColor = texture(Texture, FragTextCoord);
        ///
        ///	float ContentMask, OutlineMask;
        ///	if (int(FragContentMaskBit) == 1)
        ///		ContentMask = TextureColor.r;
        ///	else if (int(FragContentMaskBit) == 2)
        ///		ContentMask = Tex [stringa troncata]&quot;;.
        /// </summary>
        public static string TextShaderFrag {
            get {
                return ResourceManager.GetString("TextShaderFrag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Cerca una stringa localizzata simile a #version 330 core
        ///
        ///// - Inputs
        ///in vec2 Vertex;
        ///in vec4 Color;
        ///in vec2 TexCoord;
        ///
        ///uniform vec4 OutlineColor;
        ///
        ///uniform float ContentMaskBit;
        ///uniform float OutlineMaskBit;
        ///
        ///uniform mat4 ModelView;
        ///
        ///// - Outputs
        ///out vec2 FragTextCoord;
        ///out vec4 FragVertexColor;
        ///out vec4 FragTextColor;
        ///out vec4 FragOutlineColor;
        ///out float FragContentMaskBit;
        ///out float FragOutlineMaskBit;
        ///
        ///void main() 
        ///{
        ///	FragTextCoord = TexCoord;
        ///	FragVertexColor = Color;
        ///
        ///	FragOutlineColor = OutlineColor;
        ///
        ///	FragCont [stringa troncata]&quot;;.
        /// </summary>
        public static string TextShaderVert {
            get {
                return ResourceManager.GetString("TextShaderVert", resourceCulture);
            }
        }
    }
}
